// ==UserScript==
// @name         Admin Enhancements
// @namespace    admin
// @version      0.7
// @description  Chris's Admin Enhancements
// @author       Chris Pittelko
// @match        https://admin.ring.com/*
// @require      http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js
// @require      https://gist.github.com/raw/2625891/waitForKeyElements.js
// @require      http://code.highcharts.com/highcharts.js
// @require      http://code.highcharts.com/modules/exporting.js
// @grant        GM_addStyle
// @updateURL    https://raw.githubusercontent.com/EpicChloe/AdminEnhancements/master/AdminEnhancements.user
// ==/UserScript==

/* Change Log
v0.7
Added symbols to color swatches for colorblind assist
Added Stream Report to show Average End Stream, End Stream, and Start Stream.
v0.6.9
Added i2c_error reading and parsing
v0.6.6
Added ability to download graphs.
v0.6.5
Added RSSI Variance Graph.
v0.6.1
Fixed issue with double buttons appearing.
v0.6
Buttons and Spree Link should work more reliably.
Added fixes for AJAX calls that updates the page.
Added basic comments to code and changed some structure for readability.
v0.5
Generate Battery Report button now works.
v0.4.5
Summary button now works.
Fixed some css issues.
v0.4.1
Changed placeholder to button. Not functional at the moment.
v0.4
Converted to using jNode checks. Should only be checking the node that was changed instead of the entire document.
v0.3.2
Fixed MSP Error not highlighting when blank
v0.3.1
Fixed MSP Errors not highlighting
v0.3
Added update URL
v0.2
Added Low Battery Warning (<15%)
Changed Update Method to look for Ajax changes instead of Pulse Method
*/

// Color Guide:
// Red: MSP430 Error
// Orange: Low Battery (<15%)
// Blue: OTA/Setup
// Yellow: RSSI < -70

// Adding CSS
GM_addStyle('a.APESummaryButton {position: relative;display: inline; !important}');
GM_addStyle('a.APESummaryButton span {position: absolute; width: auto; color:black; height: auto; text-align: center; visibility: hidden; border-radius: 6px; !important}');
//GM_addStyle('a.APESummaryButton span:after{content:'';position:absolute;top:50%;right:100%;margin-top:-8px;width:0;height:0;border-right:8px solid #000;border-top:8px solid transparent;border-bottom:8px solid transparent !important}');
GM_addStyle('a:hover.APESummaryButton span {visibility: visible; opacity: 1; left: 100%; top: 50%; margin-top: -15px; margin-left: 15px; z-index: 999; !important}');
GM_addStyle('.APETable {box-shadow: 10px 10px 20px 2px rgba(0,0,0,0.5); border: 2px solid #000; background-color: #FFF; !important}');
GM_addStyle('#APEcontainer {min-width: 310px; margin: 0 auto}');
GM_addStyle('.APESymbolHelper {padding-left: 10px');

// Updates Report Listing when updated through AJAX calls.
function highlightReports (jNode) {

    var rssiValue = jNode.find('.key.ng-binding:contains("rssi")').parent().find(':nth-child(2)').html(),
        batteryValue = jNode.find('.key.ng-binding:contains("battery_percentage")').parent().find(':nth-child(2)').html(),
        mspValue = jNode.find('.key.ng-binding:contains("msp430_error")').parent().find(':nth-child(2)').html(),
        i2cValue = jNode.find('.key.ng-binding:contains("i2c_errors")').parent().find(':nth-child(2)').html(),
        IRCutFilterIR = jNode.find('.key.ng-binding:contains("light_ir")').parent().find(':nth-child(2)').html(),
        IRCutFilterVis = jNode.find('.key.ng-binding:contains("light_vis")').parent().find(':nth-child(2)').html(),
        IRCutFilterOn,
        startStream = jNode.find('.key.ng-binding:contains("start_stream_profile")').parent().find(':nth-child(2)').html(),
        endStream = jNode.find('.key.ng-binding:contains("end_stream_profile")').parent().find(':nth-child(2)').html(),
        streamUp = jNode.find('.key.ng-binding:contains("num_stream_upgrades")').parent().find(':nth-child(2)').html(),
        streamDown = jNode.find('.key.ng-binding:contains("num_stream_downgrades")').parent().find(':nth-child(2)').html(),
        buttonTooltip;
    
    if (rssiValue <= -70 && rssiValue !== null) {
        jNode.css("background-color", "#fcf8e3");
    }
    
    if (batteryValue <= 15 && batteryValue !== null) {
        jNode.css("background-color", "#ffc370");
    }
    
    jNode.find('.context.ng-binding:contains("After OTA")').parent().css("background-color", "#d9edf7");
    
    jNode.find('.context.ng-binding:contains("After Setup")').parent().css("background-color", "#d9edf7");
    
    if (mspValue != 0 && mspValue !== null) {
        jNode.css("background-color", "#f2dede");
    }
    
    if (IRCutFilterIR + IRCutFilterVis <= 12) {
        IRCutFilterOn = "On";
    } else {
        IRCutFilterOn = "Off";
    }
        
    buttonTooltip = [
        '<a class="btn btn-xs btn-primary APESummaryButton">Summary<span>',
        '<table class="table table-bordered APETable">',
        '<tr><td>RSSI:</td><td>'+rssiValue+'</td><td>Battery:</td><td>'+batteryValue+'</td></tr>',
        '<tr><td>MSP Error:</td><td>'+mspValue+'</td><td>IR Cut Filter:</td><td>'+IRCutFilterOn+'</td></tr>',
        '<tr><td>Stream Start:</td><td>'+startStream+'</td><td>Stream End:</td><td>'+endStream+'</td></tr>',
        '<tr><td>Stream Upgrades:</td><td>'+streamUp+'</td><td>Stream Downgrades:</td><td>'+streamDown+'</td></tr>',
        '<tr><td>i2c Error:</td><td>'+i2cValue+'</td><td>i2c Issue:</td><td>'+converti2cValueToString(i2cValue)+'</td></tr>',
        '</table>',
        '</span></a>'
    ];
    
    if (i2cValue != 0 && i2cValue !== null && i2cValue != 4) {
        buttonTooltip.push('<a class="btn btn-xs btn-danger APESummaryButton"><i class="fa fa-warning"></i><span class="APETable">');
        buttonTooltip.push('&nbspi2C Error Detected with '+converti2cValueToString(i2cValue)+'. Hard Reset is advised&nbsp');
        buttonTooltip.push('</span></a>');
    }
    
    jNode.find('.status_date.ng-binding').append(buttonTooltip.join(''));

};

// Converts 1c2_error value to a String
function converti2cValueToString(value) {
    var returnValue = [];
    if (value >= 16) {
        value = value - 16;
        returnValue.push("PIR");
    }
    if (value >= 8) {
        value = value - 8;
        returnValue.push("IR Filter");
    }
    if (value >= 4) {
        value = value - 4;
        returnValue.push("Weather Station");
    }
    if (value >= 2) {
        value = value - 2;
        returnValue.push("Fuel Gauge");
    }
    if (value >= 1) {
        value = value - 1;
        returnValue.push("LED Issue");
    }
    if (value > 1) {
        console.log("i2c Conversion Error");
    }
    
    if (returnValue.length > 1) {
        return returnValue.join(", ");
    } else if (returnValue.length == 1) {
        return returnValue.join("");
    } else {
        return "None";
    }  
        
};

// Converts color swatches to symbols for color blind help
function colorBlindHelper () {
    var eventSuccessColorSwatch = $('span.ng-scope.yipee'),
        eventFailColorSwatch = $('span.ng-scope.ouch'),
        setupSucessColorSwatch = $('span.yipee'),
        setupFailColorSwatch = $('span.ouch');
    
    //eventSuccessColorSwatch.html('<span><i class="fa fa-check"></i></span>');
    eventSuccessColorSwatch.parent().find(':nth-child(2)').addClass('pull-right');
    
    //eventFailColorSwatch.html('<span><i class="fa fa-times"></i></span>');
    eventFailColorSwatch.parent().find(':nth-child(2)').addClass('pull-right');
    
    setupSucessColorSwatch.html('<span><i class="fa fa-check APESymbolHelper"></i></span>');
    setupSucessColorSwatch.parent().find(':nth-child(2)').css('padding-left', '20px');
    
    setupFailColorSwatch.html('<span><i class="fa fa-times APESymbolHelper"></i></span>');
    setupFailColorSwatch.parent().find(':nth-child(2)').css('padding-left', '20px');
}

// Adds Report Listings to AJAX watch list
waitForKeyElements ("tr.ng-scope", highlightReports);

// Builds Battery Chart using High Charts Library
function buildBatteryReport() {
    $('#APEcontainer').highcharts({
        chart: {
            type: 'line'
        },
        title: {
            text: 'Battery Report'
        },
        subtitle: {
            text: ''
        },
        xAxis: {
            title: {
                text: 'Reports (Oldest -> Newest)'
            }
        },
        yAxis: {
            title: {
                text: 'Battery Percentage (%)'
            },
            min: 0,
            max: 100
        },
        plotOptions: {
            line: {
                dataLabels: {
                    enabled: true
                },
                enableMouseTracking: false
            }
        },
        series: [{
            name: 'Unit Battery',
            data: (function () {
                var batteryData = $('.key.ng-binding:contains("battery_percentage")').parent(),
                    batteryReport,
                    batteryValue,
                    data = [];
                for (var key in batteryData) {
                    if (batteryData.hasOwnProperty(key)) {
                        batteryReport = batteryData.eq(key);
                        batteryValue = batteryReport.find(':nth-child(2)').html();
                        if (batteryValue !== null) {
                            data.unshift(parseInt(batteryValue));
                        }
                    }
                }
                return data;
            }())
        }]
    });
};

// Builds RSSI Chart using High Charts Library
function buildRSSIReport() {
    $('#APEcontainer').highcharts({
        chart: {
            type: 'line'
        },
        title: {
            text: 'RSSI Report'
        },
        subtitle: {
            text: ''
        },
        xAxis: {
            title: {
                text: 'Reports (Oldest -> Newest)'
            }
        },
        yAxis: {
            title: {
                text: 'RSSI Reading'
            },
            min: 0,
            max: 100
        },
        plotOptions: {
            line: {
                dataLabels: {
                    enabled: true
                },
                enableMouseTracking: false
            }
        },
        series: [{
            type: 'line',
            name: 'Average RSSI',
            data: (function () {
                var rssiData = $('.key.ng-binding:contains("rssi")').parent(),
                    rssiReport,
                    rssiValue,
                    data = [];
                for (var key in rssiData) {
                    if (rssiData.hasOwnProperty(key)) {
                        rssiReport = rssiData.eq(key);
                        rssiValue = rssiReport.find(':nth-child(2)').html();
                        if (rssiValue !== null) {
                            data.unshift(parseInt(Math.abs(rssiValue)));
                        }
                    }
                }
                var average = data.map(function(x,i,arr){return x/arr.length}).reduce(function(a,b){return a + b});
                return [[0, Math.round(average)], [(data.length - 1), Math.round(average)]];
            }()),
            marker: {
                enabled: false
            },
            states: {
                hover: {
                    enabled: false,
                    lineWidth: 0
                }
            },
            enableMouseTracking: false,
            color: 'orange'
                 
                 }, {
                 
            name: 'Reported RSSI',
            data: (function () {
                var rssiData = $('.key.ng-binding:contains("rssi")').parent(),
                    rssiReport,
                    rssiValue,
                    data = [];
                for (var key in rssiData) {
                    if (rssiData.hasOwnProperty(key)) {
                        rssiReport = rssiData.eq(key);
                        rssiValue = rssiReport.find(':nth-child(2)').html();
                        if (rssiValue !== null) {
                            data.unshift(parseInt(Math.abs(rssiValue)));
                        }
                    }
                }
                return data;
            }())
        }]
    });
};

// Builds Stream Report using High Charts Library
function buildStreamReport () {
    $('#APEcontainer').highcharts({
        chart: {
            type: 'line'
        },
        title: {
            text: 'Stream Profile Report'
        },
        subtitle: {
            text: ''
        },
        xAxis: {
            title: {
                text: 'Reports (Oldest -> Newest)'
            }
        },
        yAxis: {
            title: {
                text: 'Stream Profile'
            },
            min: 0,
            max: 5
        },
        plotOptions: {
            line: {
                dataLabels: {
                    enabled: true
                },
                enableMouseTracking: false
            }
        },
        series: [{
            type: 'line',
            name: 'Average End Stream',
            data: (function () {
                var endStreamData = $('.key.ng-binding:contains("end_stream_profile")').parent(),
                    endStreamReport,
                    endStreamValue,
                    data = [];
                for (var key in endStreamData) {
                    if (endStreamData.hasOwnProperty(key)) {
                        endStreamReport = endStreamData.eq(key);
                        endStreamValue = endStreamReport.find(':nth-child(2)').html();
                        if (endStreamValue !== null) {
                            data.unshift(parseInt(Math.abs(endStreamValue)));
                        }
                    }
                }
                var average = data.map(function(x,i,arr){return x/arr.length}).reduce(function(a,b){return a + b});
                return [[0, Math.round(average)], [(data.length - 1), Math.round(average)]];
            }()),
            marker: {
                enabled: false
            },
            states: {
                hover: {
                    enabled: false,
                    lineWidth: 0
                }
            },
            enableMouseTracking: false,
            color: 'orange'
                 
                 }, {
                 
            name: 'End Stream Profile',
            data: (function () {
                var endStreamData = $('.key.ng-binding:contains("end_stream_profile")').parent(),
                    endStreamReport,
                    endStreamValue,
                    data = [];
                for (var key in endStreamData) {
                    if (endStreamData.hasOwnProperty(key)) {
                        endStreamReport = endStreamData.eq(key);
                        endStreamValue = endStreamReport.find(':nth-child(2)').html();
                        if (endStreamValue !== null) {
                            data.unshift(parseInt(Math.abs(endStreamValue)));
                        }
                    }
                }
                return data;
            }())
			
				}, {
				
			name: 'Start Stream Profile',
            data: (function () {
                var startStreamData = $('.key.ng-binding:contains("start_stream_profile")').parent(),
                    startStreamReport,
                    startStreamValue,
                    data = [];
                for (var key in startStreamData) {
                    if (startStreamData.hasOwnProperty(key)) {
                        startStreamReport = startStreamData.eq(key);
                        startStreamValue = startStreamReport.find(':nth-child(2)').html();
                        if (startStreamValue !== null) {
                            data.unshift(parseInt(Math.abs(startStreamValue)));
                        }
                    }
                }
                return data;
            }())
        }]
    });
};

// Registers first run of the APE Renderer
$(document).ready(function() {
    APERender();
});

// Checks if URL changes and if APE Renderer needs to be enabled again
var oldLocation = location.href;
setInterval(function() {
    if(location.href != oldLocation) {
        console.log('URL Changed!');
        APERender();
        oldLocation = location.href
    }
}, 1000); // check every second

// Renders Generate Battery Report Button and corrects Spree Link 
function APERender() {
    var pingCheck = 0,
        pingSpree = 1,
        pingReports = 1;
    var checkExist = setInterval(function() {
        console.log('Ping!');
        pingCheck ++;
        if ($('[data-title="\'Spree link\'"]').length && pingSpree) {
            console.log("Found Spree Link! Correcting Link!");
            var link = $('[data-title="\'Spree link\'"]').html();
            link = link.trim().replace('https://', '');
            console.log(link);
            $('[data-title="\'Spree link\'"]').html(link);
            pingSpree = 0;
        }
        if ($('#reports_resume').length && pingReports && $('#APEcontainer').length == 0) {
            console.log('Found Reports! Generating Battery Report Button!');
            $('.reports.cf').prepend('<button type="button" class="btn btn-primary" id="BatteryReportButton" data-toggle="modal" data-target="#APEBatteryReport">Generate Battery Report</button><button type="button" class="btn btn-primary" id="RSSIReportButton" data-toggle="modal" data-target="#APEBatteryReport">Generate RSSI Report</button><button type="button" class="btn btn-primary" id="StreamReportButton" data-toggle="modal" data-target="#APEStreamReport">Generate Stream Report</button>');
            $('#BatteryReportButton').parent().prepend('<div id="APEcontainer"></div>');
            $('#BatteryReportButton').on( "click", buildBatteryReport );
            $('#RSSIReportButton').on( "click", buildRSSIReport );
            $('#StreamReportButton').on( 'click', buildStreamReport );
            colorBlindHelper();
            pingReports = 0;
        }
        if (pingCheck > 10) {
            clearInterval(checkExist);
        }
    }, 1000);
}
