// ==UserScript==
// @name         Admin Enhancements
// @namespace    admin
// @version      0.9.911
// @description  Chris's Admin Enhancements
// @author       Chris Pittelko
// @match        https://admin.ring.com/*
// @match        https://staging.admin.ring.com/*
// @require      https://raw.githubusercontent.com/EpicChloe/AdminEnhancements/master/waitForKeyElements.js
// @require      http://code.highcharts.com/highcharts.js
// @require      http://code.highcharts.com/modules/exporting.js
// @require      https://raw.githubusercontent.com/EpicChloe/vis/master/dist/vis.min.js
// @grant        GM_addStyle
// @updateURL    https://raw.githubusercontent.com/EpicChloe/AdminEnhancements/master/AdminEnhancements.user
// ==/UserScript==

/* Change Log
v0.9.911
Enabled Reports
v0.9.9
Global disable
v0.9.5
Added app_errors to Summary Button for V3
v0.9.32
Fixed QA Dump
Removed Server Section .hide
Fixed Battery Charts
v0.9.30 - Why is everything broken edition
Fixed device detection
Fixed startup time
Added V3 support
Fixed Snooze Profile Label
Server settings section is now hidden on load

For full change log, please see: https://raw.githubusercontent.com/EpicChloe/AdminEnhancements/master/README.md
*/

// Add reverse to JQuery
$.fn.reverse = [].reverse;

// Adding CSS
function addStyleSheet(style){
  var getHead = document.getElementsByTagName("HEAD")[0];
  var cssNode = window.document.createElement( 'style' );
  var elementStyle = getHead.appendChild(cssNode);
  elementStyle.innerHTML = style;
  return elementStyle;
}
// Adding updated FontAwesome
addStyleSheet('@import "https://maxcdn.bootstrapcdn.com/font-awesome/4.6.1/css/font-awesome.min.css";');
// Adding Stylesheet for visjs
addStyleSheet('@import "https://cdnjs.cloudflare.com/ajax/libs/vis/4.16.1/vis.min.css";');
// Adding Google Material Design Icons
addStyleSheet('@import "https://fonts.googleapis.com/icon?family=Material+Icons";');
// Manual Styles
GM_addStyle('a.APESummaryButton {position: relative;display: inline; !important}');
GM_addStyle('a.APESummaryButton span {position: absolute; width: auto; color:black; height: auto; text-align: center; visibility: hidden; border-radius: 6px; !important}');
GM_addStyle('a:hover.APESummaryButton span {visibility: visible; opacity: 1; left: 100%; top: 50%; margin-top: -15px; margin-left: 15px; z-index: 999; !important}');
GM_addStyle('.APETable {box-shadow: 6px 6px 12px 2px rgba(0,0,0,0.3); border: 1px solid #000; border-radius: 8px; overflow:hidden; border-collapse:separate; background-color: #FFF; !important}');
GM_addStyle('#APEcontainer {min-width: 310px; margin: 0 auto; padding-bottom: 20px;}');
GM_addStyle('.APESymbolHelper {padding-left: 10px');
GM_addStyle('.page-header {text-align: center}');
GM_addStyle('.APEModal {position: fixed; top: 8vh; left: 15vw; min-width: 70vw; z-index: 9999; background: #FFF; border-radius: 6px; border: solid 1px black; !important}');
GM_addStyle('#APEColorLegend {background:#f7f7f7}');
GM_addStyle('.APEColorSwatch {border: 1px solid #999; border-radius: 2px;}');
GM_addStyle('body {overflow-x: hidden;}');
GM_addStyle('.doorbotdetails h5 {font-weight: 700;}');
GM_addStyle('APEData {display:none}');
GM_addStyle('#APEStatus {background-color: purple; color: white; border: 2px solid black;}');
GM_addStyle('#APEStatus-parent {padding-left: 5px;}');
GM_addStyle('.btn-ape {background-color: purple; color: white; border: 2px solid black;}');
GM_addStyle('.btn-ape:hover, .btn-ape:focus {color: white !important;}');
GM_addStyle('.APELocationGoButton {top: 132px !important;}');
GM_addStyle('#APEDumpModal {position: relative;border: 2px solid purple;border-radius: 4px; background: white; margin: 0 10% 80px 10%; padding: 10px;}');
GM_addStyle('#APEDumpFields {width: 100%;}');

GM_addStyle('#APEInstallRequest label {font-size: 12px;}');
GM_addStyle('#APEInstallRequestToggle {float:right;}');

/* Icon pulse */
GM_addStyle('.fa-pulse {display: inline-block;-moz-animation: pulse 2s infinite linear;-o-animation: pulse 2s infinite linear;-webkit-animation: pulse 2s infinite linear;animation: pulse 2s infinite linear;}');
GM_addStyle('@-webkit-keyframes pulse {0% { opacity: 1; }50% { opacity: 0; }100% { opacity: 1; }}');
GM_addStyle('@-moz-keyframes pulse {0% { opacity: 1; }50% { opacity: 0; }100% { opacity: 1; }}');
GM_addStyle('@-o-keyframes pulse {0% { opacity: 1; }50% { opacity: 0; }100% { opacity: 1; }}');
GM_addStyle('@-ms-keyframes pulse {0% { opacity: 1; }50% { opacity: 0; }100% { opacity: 1; }}');
GM_addStyle('@keyframes pulse {0% { opacity: 1; }50% { opacity: 0; }100% { opacity: 1; }}');

// Multilevel Dropdowns
GM_addStyle('.dropdown-submenu{position:relative;}');
GM_addStyle('.dropdown-submenu>.dropdown-menu{top:0;left:100%;margin-top:-6px;margin-left:-1px;-webkit-border-radius:0 6px 6px 6px;-moz-border-radius:0 6px 6px 6px;border-radius:0 6px 6px 6px;}');
GM_addStyle('.dropdown-submenu:hover>.dropdown-menu{display:block;}');
GM_addStyle('.dropdown-submenu>a:after{display:block;content:" ";float:right;width:0;height:0;border-color:transparent;border-style:solid;border-width:5px 0 5px 5px;border-left-color:#cccccc;margin-top:5px;margin-right:-10px;}');
GM_addStyle('.dropdown-submenu:hover>a:after{border-left-color:#ffffff;}');
GM_addStyle('.dropdown-submenu.pull-left{float:none;}.dropdown-submenu.pull-left>.dropdown-menu{left:-100%;margin-left:10px;-webkit-border-radius:6px 0 6px 6px;-moz-border-radius:6px 0 6px 6px;border-radius:6px 0 6px 6px;}');



function dumpSummaryReports() {

    var _,
        __,
        search,
        output = [];

    _ = $('#APEDumpFields').val().split(",");

    $('td.status_date').parent().each ( function ( index, element ){

        output[index] = {};

        self = this;

       $.each(_,function(__, search) {

           if(search=="date") {
â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚ var date = $(self).find('.status_date.ng-binding').text().trim();
â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚ output[index][search] = date.substring(0, date.indexOf('\n'));
â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚ } else if (search=="context"){
â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚ output[index][search] = $(self).find('.context.ng-binding').text().trim();
           } else if (search=="duration"){
â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚ output[index][search] = $(self).find('#reports_resume > div.table-responsive.dashboard-datatable.cf.ng-scope > table > tbody > tr:nth-child(4) > td:nth-child(3) > label').text().trim();
â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚ } else {
â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚ output[index][search] = $(self).find('.key.ng-binding').filter(function() {return $(this).text() === search;}).parent().find(':nth-child(2)').html();

â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚â€‚ }
       });

    });

    console.log('--- ğŸ’© ---');
    console.log(JSON.stringify(output));

    $('#APEDumpFields').val("");

};

function toggleDumpMenu() {
    $('#APEDumpModal').toggleClass('hidden');
}

function deviceType() {
    var deviceType;
    
    if(window.location.href.indexOf("doorbell") > -1) {
       if($('.doorbotKMID > div:nth-child(2) > p').text() == 'Lpd v1') { deviceType = 'ringPro'; }
       if($('.doorbotKMID > div:nth-child(2) > p').text() == 'Doorbell' || $('.doorbotKMID > div:nth-child(2) > p').text() == 'Doorbell v3') { deviceType = 'ring'; }
       if($('.doorbotKMID > div:nth-child(2) > p').text() == 'Doorbot') { deviceType = 'doorbot'; }
    }
    
    if(window.location.href.indexOf("cam") > -1) {
       deviceType = 'cam';
    }
    
    if(window.location.href.indexOf("chime") > -1) {
       deviceType = 'chime';
    }
    
    return deviceType;
}

// Builds Battery Chart using High Charts Library
function buildBatteryReport() {
    
    $('#APEcontainer').html('');
    
    $('#APEcontainer').highcharts({
        chart: {
            type: 'line',
            height: 400,
            width: $(window).width()-20
        },
        title: {
            text: 'Battery Report'
        },
        subtitle: {
            text: ''
        },
        xAxis: {
            title: {
                text: 'Reports (Oldest -> Newest)'
            }
        },
        yAxis: {
            title: {
                text: 'Battery Percentage (%)'
            },
            min: 0,
            //max: 100
        },
        tooltip: {
            enabled: false,
		},
        plotOptions: {
            line: {
                dataLabels: {
                    enabled: true
                },
                enableMouseTracking: true,
            },
            series: {
                lineWidth: 2,
                events: {
                    click: function(event) {
                        var deviceType;
                        if(window.location.href.indexOf("doorbot") > -1) {
                            if($('.doorbotKMID > div:nth-child(2) > p').text() == 'Lpd v1') { deviceType = 'ringPro'; }
                            if($('.doorbotKMID > div:nth-child(2) > p').text() == 'Doorbell' || $('.doorbotKMID > div:nth-child(2) > p').text() == 'Doorbell v3') { deviceType = 'ring'; }
                            if($('.doorbotKMID > div:nth-child(2) > p').text() == 'Doorbot') { deviceType = 'doorbot'; }
                        }
                        if(window.location.href.indexOf("cam") > -1) {
                            deviceType = 'cam';
                        }
                        if(window.location.href.indexOf("chime") > -1) {
                            deviceType = 'chime';
                        }
                        if(deviceType == 'ringPro') {
                            var selectedEvent = $('.key.ng-binding:contains("battery_voltage")').reverse().eq(event.point.x).parent().parent().parent().parent().css('border', '3px solid #04759f');
                        } else if(deviceType == 'cam') {
                            var selectedEvent = $('.key.ng-binding:contains("batt_percent")').reverse().eq(event.point.x).parent().parent().parent().parent().css('border', '3px solid #04759f');
                        } else {
                            var selectedEvent = $('.key.ng-binding:contains("battery_percentage")').reverse().eq(event.point.x).parent().parent().parent().parent().css('border', '3px solid #04759f');
                        }

                    }
                }
            }
        },
        series: [{
            name: 'Unit Battery',
            data: (function () {
                
                var batterySet;
                var deviceType;
                        if(window.location.href.indexOf("doorbell") > -1) {
                            if($('.doorbotKMID > div:nth-child(2) > p').text() == 'Lpd v1') { deviceType = 'ringPro'; }
                            if($('.doorbotKMID > div:nth-child(2) > p').text() == 'Doorbell' || $('.doorbotKMID > div:nth-child(2) > p').text() == 'Doorbell v3') { deviceType = 'ring'; }
                            if($('.doorbotKMID > div:nth-child(2) > p').text() == 'Doorbot') { deviceType = 'doorbot'; }
                        }
                        if(window.location.href.indexOf("cam") > -1) {
                            deviceType = 'cam';
                        }
                        if(window.location.href.indexOf("chime") > -1) {
                            deviceType = 'chime';
                        }

                if(deviceType == 'ringPro') {
                    batterySet = 'battery_voltage';
                } else if(deviceType == 'cam') {
                    batterySet = 'batt_percent';
                } else {
                    batterySet = 'battery_percentage';
                }
                
                var batteryData = $('.key.ng-binding:contains("'+batterySet+'")').parent(),
                    batteryReport,
                    batteryValue,
                    data = [];
                for (var key in batteryData) {
                    if (batteryData.hasOwnProperty(key)) {
                        batteryReport = batteryData.eq(key);
                        batteryValue = batteryReport.find(':nth-child(2)').html();
                        if (batteryValue != null) {
                            data.unshift(parseInt(batteryValue));
                        }
                    }
                }
                
                return data;
            }())
        }]
    });
};

// Builds RSSI Chart using High Charts Library
function buildRSSIReport() {
    
    $('#APEcontainer').html('');
    
    $('#APEcontainer').highcharts({
        chart: {
            type: 'line',
            height: 400,
            width: $(window).width()-20
        },
        title: {
            text: 'RSSI Report'
        },
        subtitle: {
            text: ''
        },
        xAxis: {
            title: {
                text: 'Reports (Oldest -> Newest)'
            }
        },
        yAxis: {
            title: {
                text: 'RSSI Reading'
            },
            min: 0,
            max: 100
        },
        tooltip: {
            enabled: false,
		},
        plotOptions: {
            line: {
                dataLabels: {
                    enabled: true
                },
                enableMouseTracking: true
            },
            series: {
                events: {
                    click: function(event) {
                        
                        var selectedEvent = $('.key.ng-binding:contains("rssi")').reverse().eq(event.point.x).parent().parent().parent().parent().css('border', '3px solid #04759f');
                        
                    }
                }
            }
        },
        series: [{
            type: 'line',
            name: 'Average RSSI',
            data: (function () {
                var rssiData = $('.key.ng-binding:contains("rssi")').parent(),
                    rssiReport,
                    rssiValue,
                    data = [];
                for (var key in rssiData) {
                    if (rssiData.hasOwnProperty(key)) {
                        rssiReport = rssiData.eq(key);
                        rssiValue = rssiReport.find(':nth-child(2)').html();
                        if (rssiValue != null) {
                            data.unshift(parseInt(Math.abs(rssiValue)));
                        }
                    }
                }
                var average = data.map(function(x,i,arr){return x/arr.length}).reduce(function(a,b){return a + b});
                return [[0, Math.round(average)], [(data.length - 1), Math.round(average)]];
            }()),
            marker: {
                enabled: false
            },
            states: {
                hover: {
                    enabled: false,
                    lineWidth: 0
                }
            },
            enableMouseTracking: false,
            color: 'orange'
                 
                 }, {
                 
            name: 'Reported RSSI',
            data: (function () {
                var rssiData = $('.key.ng-binding:contains("rssi")').parent(),
                    rssiReport,
                    rssiValue,
                    data = [];
                for (var key in rssiData) {
                    if (rssiData.hasOwnProperty(key)) {
                        rssiReport = rssiData.eq(key);
                        rssiValue = rssiReport.find(':nth-child(2)').html();
                        if (rssiValue != null) {
                            data.unshift(parseInt(Math.abs(rssiValue)));
                        }
                    }
                }
                return data;
            }())
        }]
    });
};

// Builds Stream Report using High Charts Library
function buildStreamReport () {
    
    $('#APEcontainer').html('');
    
    $('#APEcontainer').highcharts({
        chart: {
            type: 'line',
            height: 400,
            width: $(window).width()-20
        },
        title: {
            text: 'Stream Profile Report'
        },
        subtitle: {
            text: ''
        },
        xAxis: {
            title: {
                text: 'Reports (Oldest -> Newest)'
            }
        },
        yAxis: {
            title: {
                text: 'Stream Profile'
            },
            min: 0,
            max: 5
        },
        tooltip: {
            enabled: false,
		},
        plotOptions: {
            line: {
                dataLabels: {
                    enabled: true
                },
                enableMouseTracking: true
            },
            series: {
                events: {
                    click: function(event) {
                        
                        //var selectedEvent = $('.key.ng-binding:contains("end_stream_profile")').reverse().eq(event.point.x).parent().parent().parent().parent().css('border', '3px solid #04759f');
                        
                    }
                }
            }
        },
        series: [{
            type: 'line',
            name: 'Average End Stream',
            data: (function () {
                var endStreamData = $('.key.ng-binding:contains("end_stream_profile")').parent(),
                    endStreamReport,
                    endStreamValue,
                    data = [];
                for (var key in endStreamData) {
                    if (endStreamData.hasOwnProperty(key)) {
                        endStreamReport = endStreamData.eq(key);
                        endStreamValue = endStreamReport.find(':nth-child(2)').html();
                        if (endStreamValue != null) {
                            data.unshift(parseInt(Math.abs(endStreamValue)));
                        }
                    }
                }
                var average = data.map(function(x,i,arr){return x/arr.length}).reduce(function(a,b){return a + b});
                return [[0, Math.round(average)], [(data.length - 1), Math.round(average)]];
            }()),
            marker: {
                enabled: false
            },
            states: {
                hover: {
                    enabled: false,
                    lineWidth: 0
                }
            },
            enableMouseTracking: false,
            color: 'orange'
                 
                 }, {
                 
            name: 'End Stream Profile',
            data: (function () {
                var endStreamData = $('.key.ng-binding:contains("end_stream_profile")').parent(),
                    endStreamReport,
                    endStreamValue,
                    data = [];
                for (var key in endStreamData) {
                    if (endStreamData.hasOwnProperty(key)) {
                        endStreamReport = endStreamData.eq(key);
                        endStreamValue = endStreamReport.find(':nth-child(2)').html();
                        if (endStreamValue != null) {
                            data.unshift(parseInt(Math.abs(endStreamValue)));
                        }
                    }
                }
                return data;
            }())
			
				}, {
				
			name: 'Start Stream Profile',
            data: (function () {
                var startStreamData = $('.key.ng-binding:contains("start_stream_profile")').parent(),
                    startStreamReport,
                    startStreamValue,
                    data = [];
                for (var key in startStreamData) {
                    if (startStreamData.hasOwnProperty(key)) {
                        startStreamReport = startStreamData.eq(key);
                        startStreamValue = startStreamReport.find(':nth-child(2)').html();
                        if (startStreamValue != null) {
                            data.unshift(parseInt(Math.abs(startStreamValue)));
                        }
                    }
                }
                return data;
            }())
        }]
    });
};

// Builds Temperature & Battery Report using High Charts Library
function buildTemperatureBatteryReport () {

    $('#APEcontainer').html('');

    $('#APEcontainer').highcharts({
        chart: {
            type: 'line',
            height: 400,
            width: $(window).width()-20
        },
        title: {
            text: 'Temperature & Battery Report'
        },
        subtitle: {
            text: ''
        },
        xAxis: {
            title: {
                text: 'Reports (Oldest -> Newest)'
            }
        },
        yAxis: {
            title: {
                text: 'Reading'
            },
            //min: -20,
            //max: 130
        },
        tooltip: {
            enabled: false,
		},
        plotOptions: {
            line: {
                dataLabels: {
                    enabled: true
                },
                enableMouseTracking: true
            },
            series: {
                events: {
                    click: function(event) {
                        
                        //var selectedEvent = $('.key.ng-binding:contains("end_stream_profile")').reverse().eq(event.point.x).parent().parent().parent().parent().css('border', '3px solid #04759f');
                        
                    }
                }
            }
        },
        series: [{
            color: 'black',
            name: 'Unit Battery',
            data: (function () {
                
                var batterySet;
                var deviceType;
                        if(window.location.href.indexOf("doorbell") > -1) {
                            if($('.doorbotKMID > div:nth-child(2) > p').text() == 'Lpd v1') { deviceType = 'ringPro'; }
                            if($('.doorbotKMID > div:nth-child(2) > p').text() == 'Doorbell' || $('.doorbotKMID > div:nth-child(2) > p').text() == 'Doorbell v3') { deviceType = 'ring'; }
                            if($('.doorbotKMID > div:nth-child(2) > p').text() == 'Doorbot') { deviceType = 'doorbot'; }
                        }
                        if(window.location.href.indexOf("cam") > -1) {
                            deviceType = 'cam';
                        }
                        if(window.location.href.indexOf("chime") > -1) {
                            deviceType = 'chime';
                        }
    
                if(deviceType == 'ringPro') {
                    batterySet = 'battery_voltage';
                } else if(deviceType == 'cam') {
                    batterySet = 'batt_percent';
                } else {
                    batterySet = 'battery_percentage';
                }
                
                var batteryData = $('.key.ng-binding:contains("'+batterySet+'")').parent(),
                    batteryReport,
                    batteryValue,
                    data = [];
                for (var key in batteryData) {
                    if (batteryData.hasOwnProperty(key)) {
                        batteryReport = batteryData.eq(key);
                        batteryValue = batteryReport.find(':nth-child(2)').html();
                        if (batteryValue != null) {
                            data.unshift(parseInt(batteryValue));
                        }
                    }
                }
                
                return data;
            }())
			
				}, {
			color: 'orange',	
			name: 'Temperature Reading',
            data: (function () {
                var temperatureData = $('.key.ng-binding').filter(function() {return $(this).text() === "temp";}).parent(),
                    temperatureReport,
                    temperatureValue,
                    temp,
                    data = [];
                for (var key in temperatureData) {
                    if (temperatureData.hasOwnProperty(key)) {
                        temperatureReport = temperatureData.eq(key);
                        temp = temperatureReport.find(':nth-child(2)').html();
                        if (temp != null) {
                            temperatureValue = temp.replace(/\(.*?\)/, '').replace(' F ', '');
                            data.unshift(parseInt(temperatureValue));
                        }
                    }
                }
                return data;
            }())
        }]
    });
};

// Registers first run of the APE Renderer
$(document).ready(function() {
    APERender();
    $('.topnav').find('.nav-horizontal').prepend('<li class="nav-parent" id="APEStatus-parent"><button type="button" class="btn navbar-btn" id="APEStatus"><i class="fa fa-puzzle-piece" aria-hidden="true"></i></i></button></li>');
                $('#APEStatus').on('click', function() {
                    $('#APEInformationModal').toggleClass('hidden');
                });
                APEDetailsButton = 0;
                APEModal = [
                '<div class="APEModal hidden" id="APEInformationModal">',
                '<h3 class="page-header">Ring Admin Panel Enhancements</h3>',
                '<dl class="dl-horizontal">',
                '<dt>Version 0.9.911</dt>',
                '<dd>',
                '<ul>',
                     '<strong>Quick! What\'s the number to 911?</strong>',
                     '<li>Added graphs back until they get fixed</li>',
                '</ul>',
                '</dd>',
                '<dt>Version</dt>',
                '<dd>v0.9.911</dd>',
                '<dt>By</dt>',
                '<dd>Chris Pittelko - chris@ring.com</dd>',
                '<dt>Link</dt>',
                '<dd>https://raw.githubusercontent.com/EpicChloe/AdminEnhancements/master/AdminEnhancements.user</dd>',
                '</dl>',
                '</div>'
                ];
                $('.mainpanel').append(APEModal.join(''));
                $('#APENav').addClass('active');
                APEModalDump = [
                '<div class="hidden" id="APEDumpModal">',
                    '<h3>Please enter the exact fields, sperated by commas, that you want dumped:</h3>',
                    '<div class="input-group">',
                        '<input type="text" class="form-control" id="APEDumpFields" placeholder="item1,item2,item3,...">',
                            '<span class="input-group-btn">',
                                '<button class="btn btn-default" type="button" id="APEDumpButton"><i class="fa fa-download"></i></button>',
                            '</span>',
                        '</input>',
                    '</div>',
                '</div>'
                ];
                $('#reports_resume .panel-title').prepend(APEModalDump.join(''));
});

// Checks if URL changes and if APE Renderer needs to be enabled again
var oldLocation = location.href;
setInterval(function() {
    if(location.href != oldLocation) {
        console.log('URL Changed!');
        APERender();
        oldLocation = location.href;
    }
}, 1000); // check every second

// Renders Generate Battery Report Button and corrects Spree Link 
function APERender() {
    var pingCheck = 0,
        pingSpree = 1,
        pingReports = 1,
        APEModal = [];
    var checkExist = setInterval(function() {
        console.log('Ping!');
        pingCheck ++;
        if ($('[data-title="\'Spree link\'"]').length && pingSpree) {
            // Bug with link fixed in default Admin Panel
            /*console.log("Found Spree Link! Correcting Link!");
            var link = $('[data-title="\'Spree link\'"]').html();
            link = link.trim().replace('https://', '');
            console.log(link);
            $('[data-title="\'Spree link\'"]').html(link);*/
            pingSpree = 0;
        }
        if ($('#reports_resume').length && pingReports && $('#APEcontainer').length == 0 && window.location.href.indexOf("chimes") == -1) {
            console.log('Found Reports! Generating Battery Report Button!');
            var APE_ddMenu = ['&nbsp;<div class="btn-group" id="ReportButton">',
                    '<button type="button" class="btn btn-ape btn-xs dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Reports   <span class="caret"></span></button>',
                        '<ul class="dropdown-menu">',
                            '<li class="dropdown-submenu">',
                            '<a tabindex="-1" href="#">Graphs</i></a>',
                                '<ul class="dropdown-menu">',
                                    '<li><a id="BatteryReport">Generate Battery Report</a></li>',
                                    '<li><a id="RSSIReport">Generate RSSI Report</a></li>',
                                    '<li><a id="StreamReport">Generate Stream Report</a></li>',
                                    '<li><a id="TemperatureBatteryReport">Generate Temperature & Battery Report</a></li>',
                                '</ul>',
                            '</li>',
                            /*'<li class="dropdown-submenu">',
                            '<a tabindex="-1" href="#">Timelines</a>',
                                '<ul class="dropdown-menu">',
                                    '<li><a id="APETimeline">Generate Last Update Timeline</a></li>',
                                    '<li><a id="APETimelineBattery">Generate Battery Timeline</a></li>',
                                    '<li><a id="APETimelineStartup">Generate Start Up Timeline</a></li>',
                                '</ul>',
                            '</li>',*/
                            '<li><a id="APEDumpMenuToggle">Toggle Dump Menu</a></li>',
                              '<li role="separator" class="divider"></li>',
                            '<li><a id="APESummaryToggle">Switch to Default</a></li>',
                        '</ul>',
                    '</div>'
                ];
            $('#reports_resume .panel-title').append(APE_ddMenu.join(''));
            $('#ReportButton').parent().prepend('<div id="APEcontainer"></div>');
            $('#BatteryReport').on( "click", buildBatteryReport );
            $('#RSSIReport').on( "click", buildRSSIReport );
            $('#StreamReport').on( 'click', buildStreamReport );
            $('#TemperatureBatteryReport').on( 'click', buildTemperatureBatteryReport );
            $('#APETimeline').on( 'click', buildTimeline );
            $('#APETimelineBattery').on( 'click', buildTimelineBattery );
            $('#APETimelineStartup').on( 'click', buildTimelineStartup );
            // Add report button toggle
            //$('#APESummaryToggle').on ( 'click', toggleSummaryButtons );
            $('#APEDumpButton').on ( 'click', dumpSummaryReports );
            $('#APEDumpMenuToggle').on ( 'click', toggleDumpMenu );
            // Remove app data from being shown by default, making the reports summary multi-line
            //$('#reports_resume > div > div.eventslist > table > tbody > tr > td.fw_versions > ul > li:nth-child(2)').addClass('ng-hide');
            // Remove buttons for broken reports
            //$('#reports_resume').find("div:nth-child(5)").addClass('hidden defaultReportButtons');
            // New button location
            //$('#reports_resume > div > div.panel-heading > div > div:nth-child(1)').addClass('hidden defaultReportButtons');
            // colorBlindHelper(); - Unable to hook due to base implementation. Base implementation is broken. All events fail ng-class logic check
            //$('[tooltip="completed"]').attr("ng-class","").removeClass('fa-times text-danger').addClass('fa-check  text-success');
            //$('#reports_resume').find('.btn-group .ng-scope').parent().parent().clone(true, true).appendTo('#APEcontainer');
            //$('#reports_resume th:first').css('width', '26px').html('<button id="reports_resume_legend"><i class="fa fa-info-circle fa-align-center"></i></button>').parent().parent().parent().parent().prepend('<div id="APEColorLegend" class="hidden">&nbsp;<i class="fa fa-square APEColorSwatch" style="color:#f2dede;"></i>&nbsp;MSP430 Error&nbsp;<i class="fa fa-square APEColorSwatch" style="color:#ffc370;"></i>&nbsp;Low Battery(<15%)&nbsp;<i class="fa fa-square APEColorSwatch" style="color:#d9edf7;"></i>&nbsp;OTA/Setup&nbsp;<i class="fa fa-square APEColorSwatch" style="color:#fcf8e3;"></i>&nbsp;RSSI <70</div>');
            //$('#reports_resume_legend').on ( 'click', toggleLegend );
            // QoL Changes
            $('.doorbotdetails h5').css('font-weight', '700');
            //var coordinates = $('div.col-md-4.cf.coldetails.doorbotLocation > div:nth-child(2) > div:nth-child(6) > div > div.pull-right.ng-binding').text().replace(' | ' , ',');
            //$('div.col-md-4.cf.coldetails.doorbotLocation > div:nth-child(2) > div:nth-child(6) > div > div.pull-right.ng-binding').parent().parent().append('<a class="btn btn-ape APELocationGoButton">Go <i class="fa fa-angle-double-right"></i></a>');
            //$('.APELocationGoButton').on ( 'click' , function() { window.open('https://www.google.com/search?q='+coordinates); } );
            $('#reports_resume > div > div.panel-heading > div').removeAttr('style');
            pingReports = 0;
            setTimeout(function() {
                labelSnooze();
            }, 2000);
               
        }
        if (pingCheck > 10) {
            clearInterval(checkExist);
        }
    }, 1000);
}

