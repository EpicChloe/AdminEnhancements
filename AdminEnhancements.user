// ==UserScript==
// @name         Admin Enhancements
// @namespace    admin
// @version      0.9.10
// @description  Chris's Admin Enhancements
// @author       Chris Pittelko
// @match        https://admin.ring.com/*
// @require      https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js
// @require      https://gist.github.com/raw/2625891/waitForKeyElements.js
// @require      http://code.highcharts.com/highcharts.js
// @require      http://code.highcharts.com/modules/exporting.js
// @require      https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.10.6/moment.min.js
// @require      https://cdnjs.cloudflare.com/ajax/libs/vis/4.9.0/vis.min.js
// @grant        GM_addStyle
// @updateURL    https://raw.githubusercontent.com/EpicChloe/AdminEnhancements/master/AdminEnhancements.user
// ==/UserScript==

/* Change Log
v0.9.10
Changed url based device detection for new urls in Admin Panel
v0.9.9
Added Temperature & Battery Graph
Removed i2c error from Stick Up Cam summaries
Cleaned up Reports Menu
New Information Dump Interface for QA
v0.9.8.2
Enabled Temperature Warnings on Stick Up Cams
Added extra data for QA console dump
Added Multilevel menu support
i2c errors now pulse
v0.9.8.1
Disabled APE on Chimes
Disabled Temperature Warning on Stick Up Cams until temperature reading in Report Summary is in a valid format
Go Button should now open a new tab/window
v0.9.8
Changed APE interface elements to purple to distinguish from standard elements
Added temperature to event summary table
Added temperature to info dump function
Added go button to see location on google maps
Added temperature warning button
Added Google Material Design Icons

For full change log, please see: https://raw.githubusercontent.com/EpicChloe/AdminEnhancements/master/README.md
*/

// Color Guide:
// Red: MSP430 Error
// Orange: Low Battery (<15%)
// Blue: OTA/Setup
// Yellow: RSSI < -70

// Add reverse to JQuery
$.fn.reverse = [].reverse;

// Adding CSS
function addStyleSheet(style){
  var getHead = document.getElementsByTagName("HEAD")[0];
  var cssNode = window.document.createElement( 'style' );
  var elementStyle= getHead.appendChild(cssNode);
  elementStyle.innerHTML = style;
  return elementStyle;
}
// Adding updated FontAwesome
addStyleSheet('@import "https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css";');
// Adding Stylesheet for visjs
addStyleSheet('@import "https://cdnjs.cloudflare.com/ajax/libs/vis/4.9.0/vis.min.css";');
// Adding Google Material Design Icons
addStyleSheet('@import "https://fonts.googleapis.com/icon?family=Material+Icons";');
// Manual Styles
GM_addStyle('a.APESummaryButton {position: relative;display: inline; !important}');
GM_addStyle('a.APESummaryButton span {position: absolute; width: auto; color:black; height: auto; text-align: center; visibility: hidden; border-radius: 6px; !important}');
GM_addStyle('a:hover.APESummaryButton span {visibility: visible; opacity: 1; left: 100%; top: 50%; margin-top: -15px; margin-left: 15px; z-index: 999; !important}');
GM_addStyle('.APETable {box-shadow: 6px 6px 12px 2px rgba(0,0,0,0.3); border: 1px solid #000; border-radius: 8px; overflow:hidden; border-collapse:separate; background-color: #FFF; !important}');
GM_addStyle('#APEcontainer {min-width: 310px; margin: 0 auto; padding-bottom: 20px;}');
GM_addStyle('.APESymbolHelper {padding-left: 10px');
GM_addStyle('.page-header {text-align: center}');
GM_addStyle('.APEModal {position: fixed; top: 8vh; left: 15vw; min-width: 70vw; z-index: 9999; background: #FFF; border-radius: 6px; border: solid 1px black; !important}');
GM_addStyle('#APEColorLegend {background:#f7f7f7}');
GM_addStyle('.APEColorSwatch {border: 1px solid #999; border-radius: 2px;}');
GM_addStyle('body {overflow-x: hidden;}');
GM_addStyle('.doorbotdetails h5 {font-weight: 700;}');
GM_addStyle('APEData {display:none}');
GM_addStyle('#APEStatus {background-color: purple; color: white; border: 2px solid black;}');
GM_addStyle('#APEStatus-parent {padding-left: 5px;}');
GM_addStyle('.btn-ape {background-color: purple; color: white; border: 2px solid black;}');
GM_addStyle('.btn-ape:hover, .btn-ape:focus {color: white !important;}');
GM_addStyle('.APELocationGoButton {top: 132px !important;}');
GM_addStyle('#APEDumpModal {position: relative;border: 2px solid purple;border-radius: 4px; background: white; margin: 0 10% 80px 10%; padding: 10px;}');
GM_addStyle('#APEDumpFields {width: 100%;}');

GM_addStyle('#APEInstallRequest label {font-size: 12px;}');
GM_addStyle('#APEInstallRequestToggle {float:right;}');

/* Icon pulse */
GM_addStyle('.fa-pulse {display: inline-block;-moz-animation: pulse 2s infinite linear;-o-animation: pulse 2s infinite linear;-webkit-animation: pulse 2s infinite linear;animation: pulse 2s infinite linear;}');
GM_addStyle('@-webkit-keyframes pulse {0% { opacity: 1; }50% { opacity: 0; }100% { opacity: 1; }}');
GM_addStyle('@-moz-keyframes pulse {0% { opacity: 1; }50% { opacity: 0; }100% { opacity: 1; }}');
GM_addStyle('@-o-keyframes pulse {0% { opacity: 1; }50% { opacity: 0; }100% { opacity: 1; }}');
GM_addStyle('@-ms-keyframes pulse {0% { opacity: 1; }50% { opacity: 0; }100% { opacity: 1; }}');
GM_addStyle('@keyframes pulse {0% { opacity: 1; }50% { opacity: 0; }100% { opacity: 1; }}');

// Multilevel Dropdowns
GM_addStyle('.dropdown-submenu{position:relative;}');
GM_addStyle('.dropdown-submenu>.dropdown-menu{top:0;left:100%;margin-top:-6px;margin-left:-1px;-webkit-border-radius:0 6px 6px 6px;-moz-border-radius:0 6px 6px 6px;border-radius:0 6px 6px 6px;}');
GM_addStyle('.dropdown-submenu:hover>.dropdown-menu{display:block;}');
GM_addStyle('.dropdown-submenu>a:after{display:block;content:" ";float:right;width:0;height:0;border-color:transparent;border-style:solid;border-width:5px 0 5px 5px;border-left-color:#cccccc;margin-top:5px;margin-right:-10px;}');
GM_addStyle('.dropdown-submenu:hover>a:after{border-left-color:#ffffff;}');
GM_addStyle('.dropdown-submenu.pull-left{float:none;}.dropdown-submenu.pull-left>.dropdown-menu{left:-100%;margin-left:10px;-webkit-border-radius:6px 0 6px 6px;-moz-border-radius:6px 0 6px 6px;border-radius:6px 0 6px 6px;}');

// Updates Report Listing when updated through AJAX calls.
function highlightReports (jNode) {

    var rssiValue = jNode.find('.key.ng-binding:contains("rssi")').parent().find(':nth-child(2)').html(),
        batteryValue = jNode.find('.key.ng-binding:contains("battery_percentage")').parent().find(':nth-child(2)').html(),
        mspValue = jNode.find('.key.ng-binding:contains("msp430_error")').parent().find(':nth-child(2)').html(),
        i2cValue = jNode.find('.key.ng-binding:contains("i2c_errors")').parent().find(':nth-child(2)').html(),
        IRCutFilterIR = jNode.find('.key.ng-binding:contains("light_ir")').parent().find(':nth-child(2)').html(),
        IRCutFilterVis = jNode.find('.key.ng-binding:contains("light_vis")').parent().find(':nth-child(2)').html(),
        IRCutFilterOn,
        startStream = jNode.find('.key.ng-binding:contains("start_stream_profile")').parent().find(':nth-child(2)').html(),
        endStream = jNode.find('.key.ng-binding:contains("end_stream_profile")').parent().find(':nth-child(2)').html(),
        streamUp = jNode.find('.key.ng-binding:contains("num_stream_upgrades")').parent().find(':nth-child(2)').html(),
        streamDown = jNode.find('.key.ng-binding:contains("num_stream_downgrades")').parent().find(':nth-child(2)').html(),
        buttonTooltip,
        context = jNode.find('.context').text().trim(),
        motionZone = '',
        wake_up = jNode.find('.key.ng-binding:contains("wake_up_time")').parent().find(':nth-child(2)').html(),
        L3 = jNode.find('.key.ng-binding:contains("l3_connect_time")').parent().find(':nth-child(2)').html(),
        DNS_lookup = jNode.find('.key.ng-binding:contains("ding_dns_lookup_time")').parent().find(':nth-child(2)').html(),
        API_response = jNode.find('.key.ng-binding:contains("ding_api_response_time")').parent().find(':nth-child(2)').html(),
        SIP_accept = jNode.find('.key.ng-binding:contains("sip_accepted_time")').parent().find(':nth-child(2)').html(),
        first_audio = jNode.find('.key.ng-binding:contains("first_audio_time")').parent().find(':nth-child(2)').html(),
        connectData = [],
        ac_power = jNode.find('.key.ng-binding:contains("ac_power")').parent().find(':nth-child(2)').html(),
        JSONData = [],
        deviceType = '',
        temp = jNode.find('.key.ng-binding').filter(function() {return $(this).text() === "temp";}).parent().find(':nth-child(2)').html();
        
    // Delete Hardware Version From Report
    
    jNode.find('.key.ng-binding:contains("hw")').parent().remove();
    jNode.find('.key.ng-binding:contains("app")').parent().removeClass('ng-hide');
    
    // Find Device Type
    
    if(window.location.href.indexOf("doorbot") > -1) {
       deviceType = 'ring';
    }
    
    if(window.location.href.indexOf("cam") > -1) {
       deviceType = 'cam';
    }
    
    if(window.location.href.indexOf("chime") > -1) {
       deviceType = 'chime';
    }
    
    
    jNode.find('[popover-template="\'summaryTemplate.html\'"]').addClass('hidden defaultSummaryButton');
    
    if (context === 'After Motion') {
        motionZone = jNode.find('.key.ng-binding:contains("motionDetZone")').parent().find(':nth-child(2)').html();
        jNode.find('.context').text(context + ' (' + motionZone + ')');
    }
    
    if ( ac_power == 0 ) {
        jNode.find('.status_date.ng-binding').html('<i class="fa fa-battery-three-quarters"></i>&nbsp;&nbsp;' + jNode.find('.status_date.ng-binding').html());
    }
    
    if ( ac_power == 1 ) {
        jNode.find('.status_date.ng-binding').html('<i class="fa fa-plug"></i>&nbsp;&nbsp;' + jNode.find('.status_date.ng-binding').html());
    }
    
    if ( jNode.parents('div#reports_resume').length ) {
                             
        jNode.removeAttr('style');
    
        if (rssiValue <= -70 && rssiValue != null) {
            jNode.css("background-color", "#fcf8e3");
        }
    
        if (batteryValue <= 15 && batteryValue != null) {
            jNode.css("background-color", "#ffc370");
        }
    
        jNode.find('.context.ng-binding:contains("After OTA")').parent().css("background-color", "#d9edf7");
    
        jNode.find('.context.ng-binding:contains("After Setup")').parent().css("background-color", "#d9edf7");
    
        if (mspValue != 0 && mspValue != null) {
            jNode.css("background-color", "#f2dede");
        }
    }
    
    if (IRCutFilterIR + IRCutFilterVis <= 12) {
        IRCutFilterOn = "On";
    } else {
        IRCutFilterOn = "Off";
    }
    
    if (deviceType == 'cam' && i2cValue == '4') {
        i2cValue = 0;
    }
        
    buttonTooltip = [
        '&nbsp;<a class="btn btn-xs btn-ape APESummaryButton">Summary<span>',
        '<table class="table table-bordered APETable">',
        '<tr><td>RSSI:</td><td>'+nullConvert(rssiValue)+'</td><td>Battery:</td><td>'+nullConvert(batteryValue)+'</td></tr>',
        '<tr><td>MSP Error:</td><td>'+nullConvert(mspValue)+'</td><td>IR Cut Filter:</td><td>'+nullConvert(IRCutFilterOn)+'</td></tr>',
        '<tr><td>Stream Start:</td><td>'+nullConvert(startStream)+'</td><td>Stream End:</td><td>'+nullConvert(endStream)+'</td></tr>',
        '<tr><td>Stream Upgrades:</td><td>'+nullConvert(streamUp)+'</td><td>Stream Downgrades:</td><td>'+nullConvert(streamDown)+'</td></tr>',
        '<tr><td>i2c Error:</td><td>'+nullConvert(i2cValue)+'</td><td>i2c Issue:</td><td>'+converti2cValueToString(i2cValue)+'</td></tr>',
        '<tr><td>Temperature:</td><td>'+nullConvert(temp)+'</td></tr>',
        '</table>',
        '</span></a>'
    ];
    
    /*
        wake_up = jNode.find('.key.ng-binding:contains("wake_up_time")').parent().find(':nth-child(2)').html(),
        L3 = jNode.find('.key.ng-binding:contains("l3_connect_time")').parent().find(':nth-child(2)').html(),
        DNS_lookup = jNode.find('.key.ng-binding:contains("ding_dns_lookup_time")').parent().find(':nth-child(2)').html(),
        API_response = jNode.find('.key.ng-binding:contains("ding_api_response_time")').parent().find(':nth-child(2)').html(),
        SIP_accept = jNode.find('.key.ng-binding:contains("sip_accepted_time")').parent().find(':nth-child(2)').html(),
        first_audio = jNode.find('.key.ng-binding:contains("first_audio_time")').parent().find(':nth-child(2)').html(),
     */       
    if (context === 'After Ding' || context === 'After Motion') {
        
        buttonTooltip.push('&nbsp;<a class="btn btn-xs btn-ape APESummaryButton"><i class="fa fa-tachometer"></i><span>');
        buttonTooltip.push('<table class="table table-bordered APETable">');
        buttonTooltip.push('<tr><td>Wake Up:</td><td>'+wake_up+'</td></tr>');
        buttonTooltip.push('<tr><td>L3</td><td>'+L3+'</td><td>Time</td><td>'+timestampDifference(L3, wake_up, false, true)+'</td></tr>');
        buttonTooltip.push('<tr><td>DNS Lookup</td><td>'+DNS_lookup+'</td><td>Time</td><td>'+timestampDifference(DNS_lookup, wake_up, false, true)+'</td></tr>');
        buttonTooltip.push('<tr><td>API Response</td><td>'+API_response+'</td><td>Time</td><td>'+timestampDifference(API_response, wake_up, false, true)+'</td></tr>');
        //buttonTooltip.push('<tr><td>SIP Accept</td><td>'+SIP_accept+'</td><td>Time</td><td>'+timestampDifference(SIP_accept, wake_up, false, true)+'</td></tr>');
        buttonTooltip.push('<tr><td>First Audio</td><td>'+first_audio+'</td><td>Time</td><td>'+timestampDifference(first_audio, wake_up, false, true)+'</td></tr>');
        buttonTooltip.push('</table>');
        buttonTooltip.push('</span></a>');
        
        
        connectData.push({x: wake_up, y: timestampDifference(L3, wake_up, false, true), group: 0});
        connectData.push({x: wake_up, y: timestampDifference(DNS_lookup, wake_up, false, true), group: 1});
        connectData.push({x: wake_up, y: timestampDifference(API_response, wake_up, false, true), group: 2});
        //connectData.push({x: wake_up, y: timestampDifference(SIP_accept, wake_up, false, true), group: 3});
        connectData.push({x: wake_up, y: timestampDifference(first_audio, wake_up, false, true), group: 4});
    
        JSONData.push({'connectData': connectData});
    }
    
    if (i2cValue != 0 && i2cValue != null && i2cValue != 4) {
        buttonTooltip.push('&nbsp<a class="btn btn-xs btn-ape APESummaryButton"><i class="fa fa-warning fa-pulse"></i><span class="APETable">');
        buttonTooltip.push('&nbspi2C Error Detected with '+converti2cValueToString(i2cValue)+'.&nbsp');
        buttonTooltip.push('</span></a>');
    }
    
    var tempConverted = nullConvert(temp).replace(/\(.*?\)/, '').replace(' F ', '');
    
    if (tempConverted !== '---' && (tempConverted > 135 || tempConverted < 37)) {
        buttonTooltip.push('&nbsp<a class="btn btn-xs btn-ape APESummaryButton"><i class="fa fa-cloud"></i><span class="APETable">');
        buttonTooltip.push('&nbspTempature Warning: '+tempConverted+'F&nbsp');
        buttonTooltip.push('</span></a>');
    }
    
    // 37 - Performance
    // 32 - Battery stops charging
    // 23 - Derps
    
    buttonTooltip.push('<APEData>' + JSON.stringify(JSONData) + '</APEData>');
    
    if (deviceType === 'ring' || deviceType === 'cam') {
        jNode.find('.status_date.ng-binding').append(buttonTooltip.join(''));
    }
    
    $('[tooltip="completed"]').attr("ng-class","").removeClass('fa-times text-danger').addClass('fa-check text-success');

};

function dumpSummaryReports() {
    
    var _,
        __,
        search,
        output = [];
    
    _ = $('#APEDumpFields').val().split(",");
    
    $('.status_date.ng-binding').parent().each ( function ( index, element ){
        
        output[index] = {};
        
        self = this;
        
       $.each(_,function(__, search) {
       
           if(search=="date") {
               var date = $(self).find('.status_date.ng-binding').text().trim();
               output[index][search] = date.substring(0, date.indexOf('\n'));
           } else if (search=="context"){
               output[index][search] = $(self).find('.context.ng-binding').text().trim();
           } else if (search=="duration"){             
               output[index][search] = $(self).find('#reports_resume > div.table-responsive.dashboard-datatable.cf.ng-scope > table > tbody > tr:nth-child(4) > td:nth-child(3) > label').text().trim();
           } else {
               output[index][search] = $(self).find('.key.ng-binding').filter(function() {return $(this).text() === search;}).parent().find(':nth-child(2)').html();
               
           }
       });
        
    });
    
    console.log('--- 💩 ---');
    console.log(JSON.stringify(output));
    
    $('#APEDumpFields').val("");

};

function toggleDumpMenu() {
    $('#APEDumpModal').toggleClass('hidden');
}

// Converts null values to '---' for display
function nullConvert(value) {
    return (value == null) ? '---' : value;
}

// Converts 1c2_error value to a String
function converti2cValueToString(value) {
    var returnValue = [];
    if (value >= 16) {
        value = value - 16;
        returnValue.push("PIR");
    }
    if (value >= 8) {
        value = value - 8;
        returnValue.push("IR Filter");
    }
    if (value >= 4) {
        value = value - 4;
        returnValue.push("Weather Station");
    }
    if (value >= 2) {
        value = value - 2;
        returnValue.push("Fuel Gauge");
    }
    if (value >= 1) {
        value = value - 1;
        returnValue.push("LED Issue");
    }
    if (value > 1) {
        console.log("i2c Conversion Error");
    }
    
    if (returnValue.length > 1) {
        return returnValue.join(", ");
    } else if (returnValue.length == 1) {
        return returnValue.join("");
    } else {
        return "None";
    }  
        
};

// Converts color swatches to symbols for color blind help
function colorBlindHelper () {
    var eventSuccessColorSwatch = $('span.ng-scope.yipee'),
        eventFailColorSwatch = $('span.ng-scope.ouch'),
        setupSucessColorSwatch = $('span.yipee'),
        setupFailColorSwatch = $('span.ouch');
    
    //eventSuccessColorSwatch.html('<span><i class="fa fa-check"></i></span>');
    eventSuccessColorSwatch.parent().find(':nth-child(2)').addClass('pull-right');
    
    //eventFailColorSwatch.html('<span><i class="fa fa-times"></i></span>');
    eventFailColorSwatch.parent().find(':nth-child(2)').addClass('pull-right');
    
    setupSucessColorSwatch.html('<span><i class="fa fa-check APESymbolHelper"></i></span>');
    setupSucessColorSwatch.parent().find(':nth-child(2)').css('padding-left', '20px');
    
    setupFailColorSwatch.html('<span><i class="fa fa-times APESymbolHelper"></i></span>');
    setupFailColorSwatch.parent().find(':nth-child(2)').css('padding-left', '20px');
}

function toggleSummaryButtons() {
    $('[popover-template="\'summaryTemplate.html\'"]').toggleClass('hidden');
    $('.APESummaryButton').toggleClass('hidden');
    $('.defaultReportButtons').toggleClass('hidden');
    $('#ReportButton').toggleClass('hidden');
}

function toggleLegend() {
    $('#APEColorLegend').toggleClass('hidden');
}

// Adds Report Listings to AJAX watch list
waitForKeyElements ("tr.ng-scope", highlightReports);

// Returns difference in timestamps
function timestampDifference(now, then, mil, short) {
    
    //var now  = "11/10/2015 01:42:08:353";
    //var then = "11/09/2015 01:42:41:352";

    var ms = moment(now).diff(moment(then));
    var d = moment.duration(ms);
    if (mil) {
        var s = Math.floor(d.asHours()) + moment.utc(ms).format(":mm:ss:SSS");
    } else if (short) {
        var s = moment.utc(ms).format("ss.SSS");
    } else {
        var s = Math.floor(d.asHours()) + moment.utc(ms).format(":mm:ss");
    }
    
    return s;
    
}

// Builds Startup Timeline (visjs)
function buildTimelineStartup() {
    
    var data = [];
    
    $( "APEData" ).each( function( index, element ){
        
        var _data = {};
        
        _data = JSON.parse( $( this ).text() );
        
        if (_data[0] == null) {
            
        } else { 
            
            $.each(_data[0]['connectData'], function (index, value) {
                
                data.push(value);
                
            });
            
        }
        
    });
    
    console.log(data);
    
    // Clear contents of DOM element
    $('#APEcontainer').html('');
    $('#APEcontainer').html('<h3>Timeline (Start Up)</h3>');
    
    // DOM element where the Timeline will be attached
    var container = document.getElementById('APEcontainer');
    
    var groups = new vis.DataSet(); 
    
    groups.add({id: 0, content: "L3"});
    groups.add({id: 1, content: "DNS_lookup"});
    groups.add({id: 2, content: "API_response"});
    groups.add({id: 3, content: "SIP_accept"});
    groups.add({id: 4, content: "first_audio"});
    
    var dataset = new vis.DataSet(data);
    
    var options = {
        style:'bar',
        stack:true,
        barChart: {width:50, align:'center'}, // align: left, center, right
        drawPoints: false,
        dataAxis: {
            icons:true
        },
        legend: true,
        orientation:'top'
    };
    var graph2d = new vis.Graph2d(container, data, groups, options);
    
}

// Builds Time Line using visjs
function buildTimeline() {
    
    // Assign Initial Variables
    var dataArray = [],
        lastValue,
        content;
    
    // Clear contents of DOM element
    $('#APEcontainer').html('');
    $('#APEcontainer').html('<h3>Timeline (Time Since Last Event)</h3>');
     
    // DOM element where the Timeline will be attached
    var container = document.getElementById('APEcontainer');
    
    var timeData = $('td.status .key.ng-binding:contains("time")').parent(),
                    timeReport,
                    timeValue,
                    data = [];
    for (var key in timeData) {
        if (timeData.hasOwnProperty(key)) {
            timeReport = timeData.eq(key);
            timeValue = timeReport.find(':nth-child(2)').html();
            if (timeValue != null) {
                data.unshift(timeValue);
            }
        }
    }
    
    // Convert and sort by UNIX timestamp
    data.sort(function(a,b){
        return moment(a).unix() - moment(b).unix();
    });
    
    // Keeping data sorted by handling data push in order
    for (var i = 0; i < data.length; i++) { 
        // Assigns data label as oldest or time difference
        if(i!=0){content = timestampDifference(data[i], lastValue, false, false);}else{content='oldest'}
        // Pushes data index to new ojbject
        dataArray.push({
            id: i,
            start: data[i],
            content: content
        });
        // Assign last timestamp for next call
        lastValue = data[i];
    }
    
    // Create timeline data set from 
    var timelineData = new vis.DataSet(dataArray);

    // Configuration for the Timeline
    var options = {};

    // Create a Timeline
    var timeline = new vis.Timeline(container, timelineData, options);

}

// Builds Battery Timeline

function buildTimelineBattery() {
        
    $('#APEcontainer').html('');
    $('#APEcontainer').html('<h3>Timeline (Battery)</h3>');
    
   var container = document.getElementById('APEcontainer');
  var batteryData = $('.key.ng-binding:contains("battery_percentage")').parent(),
                    batteryReport,
                    batteryValue,
                    timeData = $('td.status .key.ng-binding:contains("time")').parent(),
                    timeReport,
                    timeValue,
                    data = [];
                for (var key in batteryData) {
                    if (batteryData.hasOwnProperty(key)) {
                        batteryReport = batteryData.eq(key);
                        batteryValue = batteryReport.find(':nth-child(2)').html();
                        
                        timeReport = timeData.eq(key);
                        timeValue = timeReport.find(':nth-child(2)').html();
                        if (timeValue != null) {
                            data.unshift([timeValue, parseInt(batteryValue)]);
                        }
                        
                    }
                }
                
                data.sort(function(a,b){
                    return moment(a[0]).unix() - moment(b[0]).unix();
                });
    var dataArray = [];
    
    // Keeping data sorted by handling data push in order
    for (var i = 0; i < data.length; i++) { 
        // Pushes data index to new ojbject
        dataArray.push({
            x: data[i][0],
            y: data[i][1],
            label: {
                content: data[i][1]
            }
        });
        // Assign last timestamp for next call
    }

  var dataset = new vis.DataSet(dataArray);
  var options = {
    drawPoints: {
        size: 4,
        style: 'circle'
    },
    interpolation: {
        enabled: false
    }
  };
  var graph2d = new vis.Graph2d(container, dataset, options);
            

                

};

// Builds Battery Chart using High Charts Library
function buildBatteryReport() {
    
    $('#APEcontainer').html('');
    
    $('#APEcontainer').highcharts({
        chart: {
            type: 'line',
            height: 400
        },
        title: {
            text: 'Battery Report'
        },
        subtitle: {
            text: ''
        },
        xAxis: {
            title: {
                text: 'Reports (Oldest -> Newest)'
            }
        },
        yAxis: {
            title: {
                text: 'Battery Percentage (%)'
            },
            min: 0,
            max: 100
        },
        tooltip: {
            enabled: false,
		},
        plotOptions: {
            line: {
                dataLabels: {
                    enabled: true
                },
                enableMouseTracking: true,
            },
            series: {
                lineWidth: 2,
                events: {
                    click: function(event) {
                        
                        var selectedEvent = $('.key.ng-binding:contains("battery_percentage")').reverse().eq(event.point.x).parent().parent().parent().parent().css('border', '3px solid #04759f');
                       
                    }
                }
            }
        },
        series: [{
            name: 'Unit Battery',
            data: (function () {
                var batteryData = $('.key.ng-binding:contains("battery_percentage")').parent(),
                    batteryReport,
                    batteryValue,
                    data = [];
                for (var key in batteryData) {
                    if (batteryData.hasOwnProperty(key)) {
                        batteryReport = batteryData.eq(key);
                        batteryValue = batteryReport.find(':nth-child(2)').html();
                        if (batteryValue != null) {
                            data.unshift(parseInt(batteryValue));
                        }
                    }
                }
                
                return data;
            }())
        }]
    });
};

// Builds RSSI Chart using High Charts Library
function buildRSSIReport() {
    
    $('#APEcontainer').html('');
    
    $('#APEcontainer').highcharts({
        chart: {
            type: 'line',
            height: 400
        },
        title: {
            text: 'RSSI Report'
        },
        subtitle: {
            text: ''
        },
        xAxis: {
            title: {
                text: 'Reports (Oldest -> Newest)'
            }
        },
        yAxis: {
            title: {
                text: 'RSSI Reading'
            },
            min: 0,
            max: 100
        },
        tooltip: {
            enabled: false,
		},
        plotOptions: {
            line: {
                dataLabels: {
                    enabled: true
                },
                enableMouseTracking: true
            },
            series: {
                events: {
                    click: function(event) {
                        
                        var selectedEvent = $('.key.ng-binding:contains("rssi")').reverse().eq(event.point.x).parent().parent().parent().parent().css('border', '3px solid #04759f');
                        
                    }
                }
            }
        },
        series: [{
            type: 'line',
            name: 'Average RSSI',
            data: (function () {
                var rssiData = $('.key.ng-binding:contains("rssi")').parent(),
                    rssiReport,
                    rssiValue,
                    data = [];
                for (var key in rssiData) {
                    if (rssiData.hasOwnProperty(key)) {
                        rssiReport = rssiData.eq(key);
                        rssiValue = rssiReport.find(':nth-child(2)').html();
                        if (rssiValue != null) {
                            data.unshift(parseInt(Math.abs(rssiValue)));
                        }
                    }
                }
                var average = data.map(function(x,i,arr){return x/arr.length}).reduce(function(a,b){return a + b});
                return [[0, Math.round(average)], [(data.length - 1), Math.round(average)]];
            }()),
            marker: {
                enabled: false
            },
            states: {
                hover: {
                    enabled: false,
                    lineWidth: 0
                }
            },
            enableMouseTracking: false,
            color: 'orange'
                 
                 }, {
                 
            name: 'Reported RSSI',
            data: (function () {
                var rssiData = $('.key.ng-binding:contains("rssi")').parent(),
                    rssiReport,
                    rssiValue,
                    data = [];
                for (var key in rssiData) {
                    if (rssiData.hasOwnProperty(key)) {
                        rssiReport = rssiData.eq(key);
                        rssiValue = rssiReport.find(':nth-child(2)').html();
                        if (rssiValue != null) {
                            data.unshift(parseInt(Math.abs(rssiValue)));
                        }
                    }
                }
                return data;
            }())
        }]
    });
};

// Builds Stream Report using High Charts Library
function buildStreamReport () {
    
    $('#APEcontainer').html('');
    
    $('#APEcontainer').highcharts({
        chart: {
            type: 'line',
            height: 400
        },
        title: {
            text: 'Stream Profile Report'
        },
        subtitle: {
            text: ''
        },
        xAxis: {
            title: {
                text: 'Reports (Oldest -> Newest)'
            }
        },
        yAxis: {
            title: {
                text: 'Stream Profile'
            },
            min: 0,
            max: 5
        },
        tooltip: {
            enabled: false,
		},
        plotOptions: {
            line: {
                dataLabels: {
                    enabled: true
                },
                enableMouseTracking: true
            },
            series: {
                events: {
                    click: function(event) {
                        
                        //var selectedEvent = $('.key.ng-binding:contains("end_stream_profile")').reverse().eq(event.point.x).parent().parent().parent().parent().css('border', '3px solid #04759f');
                        
                    }
                }
            }
        },
        series: [{
            type: 'line',
            name: 'Average End Stream',
            data: (function () {
                var endStreamData = $('.key.ng-binding:contains("end_stream_profile")').parent(),
                    endStreamReport,
                    endStreamValue,
                    data = [];
                for (var key in endStreamData) {
                    if (endStreamData.hasOwnProperty(key)) {
                        endStreamReport = endStreamData.eq(key);
                        endStreamValue = endStreamReport.find(':nth-child(2)').html();
                        if (endStreamValue != null) {
                            data.unshift(parseInt(Math.abs(endStreamValue)));
                        }
                    }
                }
                var average = data.map(function(x,i,arr){return x/arr.length}).reduce(function(a,b){return a + b});
                return [[0, Math.round(average)], [(data.length - 1), Math.round(average)]];
            }()),
            marker: {
                enabled: false
            },
            states: {
                hover: {
                    enabled: false,
                    lineWidth: 0
                }
            },
            enableMouseTracking: false,
            color: 'orange'
                 
                 }, {
                 
            name: 'End Stream Profile',
            data: (function () {
                var endStreamData = $('.key.ng-binding:contains("end_stream_profile")').parent(),
                    endStreamReport,
                    endStreamValue,
                    data = [];
                for (var key in endStreamData) {
                    if (endStreamData.hasOwnProperty(key)) {
                        endStreamReport = endStreamData.eq(key);
                        endStreamValue = endStreamReport.find(':nth-child(2)').html();
                        if (endStreamValue != null) {
                            data.unshift(parseInt(Math.abs(endStreamValue)));
                        }
                    }
                }
                return data;
            }())
			
				}, {
				
			name: 'Start Stream Profile',
            data: (function () {
                var startStreamData = $('.key.ng-binding:contains("start_stream_profile")').parent(),
                    startStreamReport,
                    startStreamValue,
                    data = [];
                for (var key in startStreamData) {
                    if (startStreamData.hasOwnProperty(key)) {
                        startStreamReport = startStreamData.eq(key);
                        startStreamValue = startStreamReport.find(':nth-child(2)').html();
                        if (startStreamValue != null) {
                            data.unshift(parseInt(Math.abs(startStreamValue)));
                        }
                    }
                }
                return data;
            }())
        }]
    });
};

// Builds Temperature & Battery Report using High Charts Library
function buildTemperatureBatteryReport () {
    
    $('#APEcontainer').html('');
    
    $('#APEcontainer').highcharts({
        chart: {
            type: 'line',
            height: 400
        },
        title: {
            text: 'Temperature & Battery Report'
        },
        subtitle: {
            text: ''
        },
        xAxis: {
            title: {
                text: 'Reports (Oldest -> Newest)'
            }
        },
        yAxis: {
            title: {
                text: 'Reading'
            },
            min: -20,
            max: 130
        },
        tooltip: {
            enabled: false,
		},
        plotOptions: {
            line: {
                dataLabels: {
                    enabled: true
                },
                enableMouseTracking: true
            },
            series: {
                events: {
                    click: function(event) {
                        
                        //var selectedEvent = $('.key.ng-binding:contains("end_stream_profile")').reverse().eq(event.point.x).parent().parent().parent().parent().css('border', '3px solid #04759f');
                        
                    }
                }
            }
        },
        series: [{
            color: 'black',     
            name: 'Unit Battery',
            data: (function () {
                var batteryData = $('.key.ng-binding:contains("battery_percentage")').parent(),
                    batteryReport,
                    batteryValue,
                    data = [];
                for (var key in batteryData) {
                    if (batteryData.hasOwnProperty(key)) {
                        batteryReport = batteryData.eq(key);
                        batteryValue = batteryReport.find(':nth-child(2)').html();
                        if (batteryValue != null) {
                            data.unshift(parseInt(batteryValue));
                        }
                    }
                }
                
                return data;
            }())
			
				}, {
			color: 'orange',	
			name: 'Temperature Reading',
            data: (function () {
                var temperatureData = $('.key.ng-binding').filter(function() {return $(this).text() === "temp";}).parent(),
                    temperatureReport,
                    temperatureValue,
                    temp,
                    data = [];
                for (var key in temperatureData) {
                    if (temperatureData.hasOwnProperty(key)) {
                        temperatureReport = temperatureData.eq(key);
                        temp = temperatureReport.find(':nth-child(2)').html();
                        if (temp != null) {
                            temperatureValue = temp.replace(/\(.*?\)/, '').replace(' F ', '');
                            data.unshift(parseInt(temperatureValue));
                        }
                    }
                }
                return data;
            }())
        }]
    });
};

// Registers first run of the APE Renderer
$(document).ready(function() {
    APERender();
    $('.topnav').find('.nav-horizontal').prepend('<li class="nav-parent" id="APEStatus-parent"><button type="button" class="btn navbar-btn" id="APEStatus"><i class="fa fa-flask"></i></button></li>');
                $('#APEStatus').on('click', function() {
                    $('#APEInformationModal').toggleClass('hidden');
                });
                APEDetailsButton = 0;
                APEModal = [
                '<div class="APEModal hidden" id="APEInformationModal">',
                '<h3 class="page-header">Ring Admin Panel Enhancements</h3>',
                '<dl class="dl-horizontal">',
                '<dt>Version 0.9.*</dt>',
                '<dd>',
                '<ul>',
                    '<li>Added Temperature & Battery Graph</li>',
                    '<li>Removed i2c error from Stick Up Cam summaries</li>',
                    '<li>Cleaned up Reports Menu</li>',
                    '<li>New Information Dump Interface for QA</li>',
                    '<li>Enabled Temperature Warnings on Stick Up Cams</li>',
                    '<li>i2c errors now pulse</li>',
                    '<li>Redesigned Reports Menu</li>',
                    '<li>Disabled APE on Chimes</li>',
                    '<li>Go Button should now open a new tab/window</li>',
                    '<li>Changed APE interface elements to purple to distinguish from standard elements</li>',
                    '<li>Added temperature to event summary table</li>',
                    '<li>Added temperature to info dump function</li>',
                    '<li>Added go button to see location on google maps</li>',
                    '<li>Added temperature warning button</li>',
                    '<li>Fixed issue with time difference calculation</li>',
                    '<li>Added Battery Timeline</li>',
                    '<li>Added Startup Timeline</li>',
                    '<li>Added Startup hover button</li>',
                    '<li>Corrected conflict with Chime Firmware Audios</li>',
                '</ul>',
                '</dd>',
                '<dt>Version</dt>',
                '<dd>0.9.9</dd>',
                '<dt>By</dt>',
                '<dd>Chris Pittelko - chris@ring.com</dd>',
                '<dt>Link</dt>',
                '<dd>https://raw.githubusercontent.com/EpicChloe/AdminEnhancements/master/AdminEnhancements.user</dd>',
                '</dl>',
                '</div>'
                ];
                $('.mainpanel').append(APEModal.join(''));
                $('#APENav').addClass('active');
                APEModalDump = [
                '<div class="hidden" id="APEDumpModal">',
                    '<h3>Please enter the exact fields, sperated by commas, that you want dumped:</h3>',
                    '<div class="input-group">',
                        '<input type="text" class="form-control" id="APEDumpFields" placeholder="item1,item2,item3,...">',
                            '<span class="input-group-btn">',
                                '<button class="btn btn-default" type="button" id="APEDumpButton"><i class="fa fa-download"></i></button>',
                            '</span>',
                        '</input>',
                    '</div>',
                '</div>'
                ];
                $('#reports_resume .panel-title').prepend(APEModalDump.join(''));
});

// Checks if URL changes and if APE Renderer needs to be enabled again
var oldLocation = location.href;
setInterval(function() {
    if(location.href != oldLocation) {
        console.log('URL Changed!');
        APERender();
        oldLocation = location.href
    }
}, 1000); // check every second

// Renders Generate Battery Report Button and corrects Spree Link 
function APERender() {
    var pingCheck = 0,
        pingSpree = 1,
        pingReports = 1,
        pingCustomer = 1,
        APEModal = [];
    var checkExist = setInterval(function() {
        console.log('Ping!');
        pingCheck ++;
        if ($('[data-title="\'Spree link\'"]').length && pingSpree) {
            // Bug with link fixed in default Admin Panel
            /*console.log("Found Spree Link! Correcting Link!");
            var link = $('[data-title="\'Spree link\'"]').html();
            link = link.trim().replace('https://', '');
            console.log(link);
            $('[data-title="\'Spree link\'"]').html(link);*/
            pingSpree = 0;
        }
        if ($('#reports_resume').length && pingReports && $('#APEcontainer').length == 0 && window.location.href.indexOf("chimes") == -1) {
            console.log('Found Reports! Generating Battery Report Button!');
            var APE_ddMenu = ['&nbsp;<div class="btn-group" id="ReportButton">',
                    '<button type="button" class="btn btn-ape btn-xs dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Reports   <span class="caret"></span></button>',
                        '<ul class="dropdown-menu">',
                            '<li class="dropdown-submenu">',
                            '<a tabindex="-1" href="#">Graphs</i></a>',
                                '<ul class="dropdown-menu">',
                                    '<li><a id="BatteryReport">Generate Battery Report</a></li>',
                                    '<li><a id="RSSIReport">Generate RSSI Report</a></li>',
                                    '<li><a id="StreamReport">Generate Stream Report</a></li>',
                                    '<li><a id="TemperatureBatteryReport">Generate Temperature & Battery Report</a></li>',
                                '</ul>',
                            '</li>',
                            '<li class="dropdown-submenu">',
                            '<a tabindex="-1" href="#">Timelines</a>',
                                '<ul class="dropdown-menu">',
                                    '<li><a id="APETimeline">Generate Last Update Timeline</a></li>',
                                    '<li><a id="APETimelineBattery">Generate Battery Timeline</a></li>',
                                    '<li><a id="APETimelineStartup">Generate Start Up Timeline</a></li>',
                                '</ul>',
                            '</li>',
                            '<li><a id="APEDumpMenuToggle">Toggle Dump Menu</a></li>',
                              '<li role="separator" class="divider"></li>',
                            '<li><a id="APESummaryToggle">Switch to Default</a></li>',
                        '</ul>',
                    '</div>'
                ];
            $('#reports_resume .panel-title').append(APE_ddMenu.join(''));
            $('#ReportButton').parent().prepend('<div id="APEcontainer"></div>');
            $('#BatteryReport').on( "click", buildBatteryReport );
            $('#RSSIReport').on( "click", buildRSSIReport );
            $('#StreamReport').on( 'click', buildStreamReport );
            $('#TemperatureBatteryReport').on( 'click', buildTemperatureBatteryReport );
            $('#APETimeline').on( 'click', buildTimeline );
            $('#APETimelineBattery').on( 'click', buildTimelineBattery );
            $('#APETimelineStartup').on( 'click', buildTimelineStartup );
            // Add report button toggle
            $('#APESummaryToggle').on ( 'click', toggleSummaryButtons );
            $('#APEDumpButton').on ( 'click', dumpSummaryReports );
            $('#APEDumpMenuToggle').on ( 'click', toggleDumpMenu );
            // Remove buttons for broken reports
            $('#reports_resume').find("p:first").addClass('hidden defaultReportButtons');
            // colorBlindHelper(); - Unable to hook due to base implementation. Base implementation is broken. All events fail ng-class logic check
            $('[tooltip="completed"]').attr("ng-class","").removeClass('fa-times text-danger').addClass('fa-check  text-success');
            //$('#reports_resume').find('.btn-group .ng-scope').parent().parent().clone(true, true).appendTo('#APEcontainer');
            $('#reports_resume th:first').css('width', '26px').html('<button id="reports_resume_legend"><i class="fa fa-info-circle fa-align-center"></i></button>').parent().parent().parent().parent().prepend('<div id="APEColorLegend" class="hidden">&nbsp;<i class="fa fa-square APEColorSwatch" style="color:#f2dede;"></i>&nbsp;MSP430 Error&nbsp;<i class="fa fa-square APEColorSwatch" style="color:#ffc370;"></i>&nbsp;Low Battery(<15%)&nbsp;<i class="fa fa-square APEColorSwatch" style="color:#d9edf7;"></i>&nbsp;OTA/Setup&nbsp;<i class="fa fa-square APEColorSwatch" style="color:#fcf8e3;"></i>&nbsp;RSSI <70</div>');
            $('#reports_resume_legend').on ( 'click', toggleLegend );
            // QoL Changes
            if ( $('.doorbotKMID .doorbotProduct p').text() == 'Doorbell' ) { $('.doorbotKMID .doorbotProduct p').text('Ring Video Doorbell'); };
            $('.doorbotdetails h5').css('font-weight', '700');
            var coordinates = $('.doorbotMacID h5').filter(function() {return $(this).text() === "coordinates";}).parent().text().replace('coordinates', '').replace('Latitude: ', '').replace('Longitude: ', ',').trim().replace('\n', '').replace(/ /g, '');
            $('.doorbotMacID h5').filter(function() {return $(this).text() === "coordinates";}).parent().parent().append('<a class="btn btn-ape APELocationGoButton">Go <i class="fa fa-angle-double-right"></i></a>');
            $('.APELocationGoButton').on ( 'click' , function() { window.open('https://www.google.com/search?q='+coordinates); } );
            pingReports = 0;
               
        }
        if (pingCheck > 10) {
            clearInterval(checkExist);
        }
        if (window.location.href.indexOf("customers") !== -1 && pingCustomer == 1 && $('#APEInstallRequest').length == 0) {
            buildInstallRequest();
            pingCustomer = 0;
        }
    }, 1000);
}

function buildInstallRequest() {
    
    var Modal = [];
    
    Modal = [
'<div class="modal fade" tabindex="-1" role="dialog" id="APEInstallRequest">',
  '<div class="modal-dialog">',
    '<div class="modal-content">',
      '<div class="modal-header">',
        '<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>',
        '<h4 class="modal-title">Device Installation Request</h4>',
      '</div>',
      '<div class="modal-body">',
        
'<div class="container-fluid"> <div class="row"> <div class="col-md-10 col-sm-10 col-xs-12"> <form> <div class="form-group "> <label class="control-label requiredField" for="Product"> Product <span class="asteriskField"> * </span> </label> <select class="select form-control" id="InsReq_Product" name="Product"> <option value="Ring Video Doorbell"> Ring Video Doorbell </option> <option value="Ring Video Doorbell Pro"> Ring Video Doorbell Pro </option> </select> </div><div class="form-group "> <label class="control-label requiredField" for="CustomerName"> Full Name <span class="asteriskField"> * </span> </label> <input class="form-control" id="InsReq_CustomerName" name="CustomerName" placeholder="Full Name" type="text"> </div><div class="form-group "> <label class="control-label requiredField" for="CustomerAddress"> Street Address <span class="asteriskField"> * </span> </label> <input class="form-control" id="InsReq_CustomerAddress" name="CustomerAddress" placeholder="Street Address" type="text"> </div><div class="form-group "> <label class="control-label " for="CustomerUnitNumber"> Unit/Apt Number </label> <input class="form-control" id="InsReq_CustomerUnitNumber" name="CustomerUnitNumber" placeholder="Unit #" type="text"> </div><div class="form-group "> <label class="control-label requiredField" for="CustomerCity"> City <span class="asteriskField"> * </span> </label> <input class="form-control" id="InsReq_CustomerCity" name="CustomerCity" placeholder="City" type="text"> </div><div class="form-group "> <label class="control-label requiredField" for="CustomerState"> State <span class="asteriskField"> * </span> </label> <input class="form-control" id="InsReq_CustomerState" name="CustomerState" placeholder="State" type="text"> </div><div class="form-group "> <label class="control-label requiredField" for="CustomerZipCode"> Zip Code <span class="asteriskField"> * </span> </label> <input class="form-control" id="InsReq_CustomerZipCode" name="CustomerZipCode" placeholder="Zip Code" type="text"> </div><div class="form-group "> <label class="control-label requiredField" for="CustomerPhone"> Telephone Number <span class="asteriskField"> * </span> </label> <input class="form-control" id="InsReq_CustomerPhone" name="CustomerPhone" placeholder="(xxx) xxx-xxxx" type="text"> </div><div class="form-group "> <label class="control-label requiredField" for="CustomerEmail"> Email <span class="asteriskField"> * </span> </label> <input class="form-control" id="InsReq_CustomerEmail" name="CustomerEmail" placeholder="Email" type="text"> </div><div class="form-group "> <label class="control-label " for="CustomerNotes"> Notes </label> <textarea class="form-control" cols="40" id="InsReq_CustomerNotes" name="CustomerNotes" placeholder="Notes" rows="10"></textarea> </div><input type="hidden" name="agent" id="InsReq_RequestingAgent" value="'+$('button.btn.btn-default.dropdown-toggle.loggeduser.ng-binding').text().trim()+'"> <div class="form-group"> <div> <button class="btn btn-primary " data-dismiss="modal" id="APEInstallRequestFormButton"> Submit </button> </div></div></form> </div></div></div></div></div>',        
      '</div>',
    '</div>',
  '</div>',
'</div>',    
        ];
    // Hiding Button Until August Switch On
    //$('#access_resume > form h1').append('<button type="button" class="btn btn-ape" data-toggle="modal" data-target="#APEInstallRequest" id="APEInstallRequestToggle">Installation Request</button>').append(Modal.join(''));
    $('#APEInstallRequestFormButton').on( 'click', function(event) { 
    
        event.preventDefault();
        
        
        $.ajax({
            url: '//formspree.io/chris@ring.com', 
            method: 'POST',
            data: {
                Requesting_Agent: $('#InsReq_RequestingAgent').val(),
                Product: $('#InsReq_Product').val(),
                Full_Name: $('#InsReq_CustomerName').val(),
                Address: $('#InsReq_CustomerAddress').val() + ' ' + $('#InsReq_CustomerUnitNumber').val(),
                City: $('#InsReq_CustomerCity').val(),
                State: $('#InsReq_CustomerState').val(),
                ZipCode: $('#InsReq_CustomerZipCode').val(),
                Phone_Number: $('#InsReq_CustomerPhone').val(),
                Email: $('#InsReq_CustomerEmail').val(),
                Notes: $('#InsReq_CustomerNotes').val()
                
            },
            dataType: 'json'
        });
        
    });

}

